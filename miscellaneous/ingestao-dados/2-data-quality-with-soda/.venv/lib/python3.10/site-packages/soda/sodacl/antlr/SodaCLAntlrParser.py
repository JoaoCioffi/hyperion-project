# Generated from /Users/vijay/work/soda/soda-library/src/soda/soda/sodacl/antlr/SodaCLAntlr.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,60,462,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,0,1,0,1,0,1,0,3,0,107,
        8,0,1,1,1,1,3,1,111,8,1,1,2,1,2,1,2,3,2,116,8,2,1,2,1,2,1,3,1,3,
        1,3,3,3,123,8,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,131,8,4,1,4,1,4,1,4,
        1,4,3,4,137,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
        1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,160,8,9,1,9,1,9,1,9,1,9,
        3,9,166,8,9,1,9,1,9,1,10,1,10,3,10,172,8,10,1,10,1,10,1,10,1,10,
        3,10,178,8,10,3,10,180,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,3,12,193,8,12,1,12,3,12,196,8,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,208,8,13,1,14,1,14,1,15,
        1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,3,18,221,8,18,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,5,20,230,8,20,10,20,12,20,233,9,20,1,20,
        1,20,1,21,1,21,3,21,239,8,21,1,22,1,22,3,22,243,8,22,1,23,1,23,3,
        23,247,8,23,1,24,1,24,3,24,251,8,24,1,24,1,24,1,24,3,24,256,8,24,
        1,24,1,24,1,24,1,24,1,24,1,24,3,24,264,8,24,1,25,1,25,1,25,1,25,
        3,25,270,8,25,1,25,1,25,1,25,3,25,275,8,25,1,25,1,25,1,25,1,25,1,
        25,1,25,3,25,283,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
        27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,4,28,304,8,
        28,11,28,12,28,305,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
        1,32,3,32,318,8,32,1,32,3,32,321,8,32,1,32,1,32,3,32,325,8,32,1,
        33,1,33,1,34,1,34,1,34,4,34,332,8,34,11,34,12,34,333,1,34,3,34,337,
        8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,5,35,356,8,35,10,35,12,35,359,9,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,372,8,35,
        10,35,12,35,375,9,35,1,35,1,35,3,35,379,8,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,38,1,38,1,38,1,38,3,38,391,8,38,1,39,1,39,1,39,1,39,
        1,39,3,39,398,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,3,43,428,8,43,1,44,1,44,1,44,1,44,
        1,44,1,45,1,45,1,45,1,45,1,45,1,46,3,46,441,8,46,1,46,1,46,1,47,
        1,47,1,47,1,47,3,47,449,8,47,1,47,3,47,452,8,47,1,47,1,47,3,47,456,
        8,47,1,48,1,48,1,49,1,49,1,49,0,0,50,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,0,9,1,0,35,37,
        2,0,38,38,42,42,2,0,39,39,43,43,1,0,30,32,2,0,50,50,53,53,1,0,48,
        54,1,0,12,14,1,0,46,47,2,0,35,37,55,57,463,0,106,1,0,0,0,2,110,1,
        0,0,0,4,112,1,0,0,0,6,119,1,0,0,0,8,126,1,0,0,0,10,140,1,0,0,0,12,
        145,1,0,0,0,14,148,1,0,0,0,16,151,1,0,0,0,18,154,1,0,0,0,20,171,
        1,0,0,0,22,183,1,0,0,0,24,187,1,0,0,0,26,207,1,0,0,0,28,209,1,0,
        0,0,30,211,1,0,0,0,32,213,1,0,0,0,34,216,1,0,0,0,36,218,1,0,0,0,
        38,222,1,0,0,0,40,224,1,0,0,0,42,238,1,0,0,0,44,242,1,0,0,0,46,246,
        1,0,0,0,48,250,1,0,0,0,50,265,1,0,0,0,52,284,1,0,0,0,54,288,1,0,
        0,0,56,303,1,0,0,0,58,309,1,0,0,0,60,311,1,0,0,0,62,313,1,0,0,0,
        64,324,1,0,0,0,66,326,1,0,0,0,68,331,1,0,0,0,70,378,1,0,0,0,72,380,
        1,0,0,0,74,382,1,0,0,0,76,390,1,0,0,0,78,392,1,0,0,0,80,401,1,0,
        0,0,82,405,1,0,0,0,84,412,1,0,0,0,86,427,1,0,0,0,88,429,1,0,0,0,
        90,434,1,0,0,0,92,440,1,0,0,0,94,455,1,0,0,0,96,457,1,0,0,0,98,459,
        1,0,0,0,100,107,3,14,7,0,101,107,3,18,9,0,102,107,3,20,10,0,103,
        107,3,70,35,0,104,107,3,8,4,0,105,107,3,16,8,0,106,100,1,0,0,0,106,
        101,1,0,0,0,106,102,1,0,0,0,106,103,1,0,0,0,106,104,1,0,0,0,106,
        105,1,0,0,0,107,1,1,0,0,0,108,111,3,6,3,0,109,111,3,4,2,0,110,108,
        1,0,0,0,110,109,1,0,0,0,111,3,1,0,0,0,112,115,5,1,0,0,113,114,5,
        60,0,0,114,116,3,44,22,0,115,113,1,0,0,0,115,116,1,0,0,0,116,117,
        1,0,0,0,117,118,5,0,0,1,118,5,1,0,0,0,119,122,3,36,18,0,120,121,
        5,60,0,0,121,123,3,46,23,0,122,120,1,0,0,0,122,123,1,0,0,0,123,124,
        1,0,0,0,124,125,5,0,0,1,125,7,1,0,0,0,126,127,5,2,0,0,127,128,5,
        60,0,0,128,130,3,98,49,0,129,131,3,10,5,0,130,129,1,0,0,0,130,131,
        1,0,0,0,131,136,1,0,0,0,132,133,5,60,0,0,133,134,5,53,0,0,134,135,
        5,60,0,0,135,137,3,68,34,0,136,132,1,0,0,0,136,137,1,0,0,0,137,138,
        1,0,0,0,138,139,5,0,0,1,139,9,1,0,0,0,140,141,5,60,0,0,141,142,5,
        3,0,0,142,143,5,60,0,0,143,144,3,98,49,0,144,11,1,0,0,0,145,146,
        5,60,0,0,146,147,5,30,0,0,147,13,1,0,0,0,148,149,5,4,0,0,149,150,
        5,0,0,1,150,15,1,0,0,0,151,152,5,5,0,0,152,153,5,0,0,1,153,17,1,
        0,0,0,154,155,5,6,0,0,155,156,5,60,0,0,156,159,3,98,49,0,157,158,
        5,60,0,0,158,160,3,80,40,0,159,157,1,0,0,0,159,160,1,0,0,0,160,165,
        1,0,0,0,161,162,5,60,0,0,162,163,5,29,0,0,163,164,5,60,0,0,164,166,
        3,98,49,0,165,161,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,
        5,0,0,1,168,19,1,0,0,0,169,172,3,24,12,0,170,172,3,34,17,0,171,169,
        1,0,0,0,171,170,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,179,
        3,36,18,0,174,177,5,60,0,0,175,178,3,44,22,0,176,178,3,22,11,0,177,
        175,1,0,0,0,177,176,1,0,0,0,178,180,1,0,0,0,179,174,1,0,0,0,179,
        180,1,0,0,0,180,181,1,0,0,0,181,182,5,0,0,1,182,21,1,0,0,0,183,184,
        5,53,0,0,184,185,5,60,0,0,185,186,5,7,0,0,186,23,1,0,0,0,187,188,
        5,33,0,0,188,192,5,60,0,0,189,190,3,26,13,0,190,191,5,60,0,0,191,
        193,1,0,0,0,192,189,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,
        196,3,32,16,0,195,194,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,197,
        198,5,25,0,0,198,199,5,60,0,0,199,25,1,0,0,0,200,201,3,28,14,0,201,
        202,5,60,0,0,202,203,5,34,0,0,203,204,5,60,0,0,204,205,3,96,48,0,
        205,208,1,0,0,0,206,208,3,30,15,0,207,200,1,0,0,0,207,206,1,0,0,
        0,208,27,1,0,0,0,209,210,7,0,0,0,210,29,1,0,0,0,211,212,5,8,0,0,
        212,31,1,0,0,0,213,214,5,9,0,0,214,215,5,60,0,0,215,33,1,0,0,0,216,
        217,5,10,0,0,217,35,1,0,0,0,218,220,3,38,19,0,219,221,3,40,20,0,
        220,219,1,0,0,0,220,221,1,0,0,0,221,37,1,0,0,0,222,223,3,98,49,0,
        223,39,1,0,0,0,224,225,5,42,0,0,225,231,3,42,21,0,226,227,5,44,0,
        0,227,228,5,60,0,0,228,230,3,42,21,0,229,226,1,0,0,0,230,233,1,0,
        0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,
        0,0,234,235,5,43,0,0,235,41,1,0,0,0,236,239,3,92,46,0,237,239,3,
        98,49,0,238,236,1,0,0,0,238,237,1,0,0,0,239,43,1,0,0,0,240,243,3,
        52,26,0,241,243,3,48,24,0,242,240,1,0,0,0,242,241,1,0,0,0,243,45,
        1,0,0,0,244,247,3,54,27,0,245,247,3,50,25,0,246,244,1,0,0,0,246,
        245,1,0,0,0,247,47,1,0,0,0,248,249,5,28,0,0,249,251,5,60,0,0,250,
        248,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,5,27,0,0,253,
        255,5,60,0,0,254,256,7,1,0,0,255,254,1,0,0,0,255,256,1,0,0,0,256,
        257,1,0,0,0,257,258,3,64,32,0,258,259,5,60,0,0,259,260,5,26,0,0,
        260,261,5,60,0,0,261,263,3,64,32,0,262,264,7,2,0,0,263,262,1,0,0,
        0,263,264,1,0,0,0,264,49,1,0,0,0,265,266,3,66,33,0,266,269,5,60,
        0,0,267,268,5,28,0,0,268,270,5,60,0,0,269,267,1,0,0,0,269,270,1,
        0,0,0,270,271,1,0,0,0,271,272,5,27,0,0,272,274,5,60,0,0,273,275,
        7,1,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,277,
        3,64,32,0,277,278,5,60,0,0,278,279,5,26,0,0,279,280,5,60,0,0,280,
        282,3,64,32,0,281,283,7,2,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,
        51,1,0,0,0,284,285,3,62,31,0,285,286,5,60,0,0,286,287,3,64,32,0,
        287,53,1,0,0,0,288,289,3,66,33,0,289,290,5,60,0,0,290,291,3,62,31,
        0,291,292,5,60,0,0,292,293,3,64,32,0,293,55,1,0,0,0,294,295,3,58,
        29,0,295,296,5,60,0,0,296,297,3,60,30,0,297,298,5,60,0,0,298,299,
        3,64,32,0,299,300,5,60,0,0,300,301,3,60,30,0,301,302,5,60,0,0,302,
        304,1,0,0,0,303,294,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,
        306,1,0,0,0,306,307,1,0,0,0,307,308,3,58,29,0,308,57,1,0,0,0,309,
        310,7,3,0,0,310,59,1,0,0,0,311,312,7,4,0,0,312,61,1,0,0,0,313,314,
        7,5,0,0,314,63,1,0,0,0,315,320,3,92,46,0,316,318,5,60,0,0,317,316,
        1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,321,5,45,0,0,320,317,
        1,0,0,0,320,321,1,0,0,0,321,325,1,0,0,0,322,325,3,68,34,0,323,325,
        5,57,0,0,324,315,1,0,0,0,324,322,1,0,0,0,324,323,1,0,0,0,325,65,
        1,0,0,0,326,327,5,11,0,0,327,67,1,0,0,0,328,329,3,96,48,0,329,330,
        7,6,0,0,330,332,1,0,0,0,331,328,1,0,0,0,332,333,1,0,0,0,333,331,
        1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,3,96,48,0,336,335,
        1,0,0,0,336,337,1,0,0,0,337,69,1,0,0,0,338,339,5,15,0,0,339,340,
        5,60,0,0,340,341,3,72,36,0,341,342,5,60,0,0,342,343,5,16,0,0,343,
        344,5,60,0,0,344,345,3,98,49,0,345,346,5,60,0,0,346,347,3,74,37,
        0,347,379,1,0,0,0,348,349,5,15,0,0,349,350,5,60,0,0,350,351,5,42,
        0,0,351,357,3,72,36,0,352,353,5,44,0,0,353,354,5,60,0,0,354,356,
        3,72,36,0,355,352,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,
        1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,361,5,43,0,0,361,362,
        5,60,0,0,362,363,5,16,0,0,363,364,5,60,0,0,364,365,3,98,49,0,365,
        366,5,60,0,0,366,367,5,42,0,0,367,373,3,74,37,0,368,369,5,44,0,0,
        369,370,5,60,0,0,370,372,3,74,37,0,371,368,1,0,0,0,372,375,1,0,0,
        0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,
        0,376,377,5,43,0,0,377,379,1,0,0,0,378,338,1,0,0,0,378,348,1,0,0,
        0,379,71,1,0,0,0,380,381,3,98,49,0,381,73,1,0,0,0,382,383,3,98,49,
        0,383,75,1,0,0,0,384,391,3,78,39,0,385,391,3,84,42,0,386,391,3,82,
        41,0,387,391,3,86,43,0,388,391,3,88,44,0,389,391,3,90,45,0,390,384,
        1,0,0,0,390,385,1,0,0,0,390,386,1,0,0,0,390,387,1,0,0,0,390,388,
        1,0,0,0,390,389,1,0,0,0,391,77,1,0,0,0,392,393,5,17,0,0,393,394,
        5,60,0,0,394,397,3,98,49,0,395,396,5,60,0,0,396,398,3,80,40,0,397,
        395,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,0,0,1,400,
        79,1,0,0,0,401,402,5,38,0,0,402,403,3,98,49,0,403,404,5,39,0,0,404,
        81,1,0,0,0,405,406,5,18,0,0,406,407,5,60,0,0,407,408,3,98,49,0,408,
        409,5,60,0,0,409,410,3,80,40,0,410,411,5,0,0,1,411,83,1,0,0,0,412,
        413,5,19,0,0,413,414,5,60,0,0,414,415,3,98,49,0,415,416,5,0,0,1,
        416,85,1,0,0,0,417,418,5,20,0,0,418,419,5,60,0,0,419,420,3,98,49,
        0,420,421,5,0,0,1,421,428,1,0,0,0,422,423,5,21,0,0,423,424,5,60,
        0,0,424,425,3,98,49,0,425,426,5,0,0,1,426,428,1,0,0,0,427,417,1,
        0,0,0,427,422,1,0,0,0,428,87,1,0,0,0,429,430,5,22,0,0,430,431,5,
        60,0,0,431,432,3,98,49,0,432,433,5,0,0,1,433,89,1,0,0,0,434,435,
        5,23,0,0,435,436,5,60,0,0,436,437,3,98,49,0,437,438,5,0,0,1,438,
        91,1,0,0,0,439,441,7,7,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,
        1,0,0,0,442,443,3,94,47,0,443,93,1,0,0,0,444,456,3,96,48,0,445,446,
        5,59,0,0,446,448,5,24,0,0,447,449,5,59,0,0,448,447,1,0,0,0,448,449,
        1,0,0,0,449,456,1,0,0,0,450,452,5,59,0,0,451,450,1,0,0,0,451,452,
        1,0,0,0,452,453,1,0,0,0,453,454,5,24,0,0,454,456,5,59,0,0,455,444,
        1,0,0,0,455,445,1,0,0,0,455,451,1,0,0,0,456,95,1,0,0,0,457,458,5,
        59,0,0,458,97,1,0,0,0,459,460,7,8,0,0,460,99,1,0,0,0,41,106,110,
        115,122,130,136,159,165,171,177,179,192,195,207,220,231,238,242,
        246,250,255,263,269,274,282,305,317,320,324,333,336,357,373,378,
        390,397,427,440,448,451,455
    ]

class SodaCLAntlrParser ( Parser ):

    grammarFileName = "SodaCLAntlr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'rows diff'", "'freshness using'", "'with'", 
                     "'failed rows'", "'group by'", "'row_count same as'", 
                     "'default'", "'same day last week'", "'percent'", "'anomaly score for '", 
                     "'diff'", "'d'", "'h'", "'m'", "'values in'", "'must exist in'", 
                     "'checks for'", "'filter'", "'configurations for'", 
                     "'for each dataset'", "'for each table'", "'for each column'", 
                     "'reconciliation'", "'.'", "'for'", "'and'", "'between'", 
                     "'not'", "'in'", "'warn'", "'fail'", "'pass'", "'change'", 
                     "'last'", "'avg'", "'min'", "'max'", "'['", "']'", 
                     "'{'", "'}'", "'('", "')'", "','", "'%'", "'+'", "'-'", 
                     "'!='", "'<>'", "'<='", "'>='", "'='", "'<'", "'>'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "FOR", "AND", "BETWEEN", "NOT", "IN", 
                      "WARN", "FAIL", "PASS", "CHANGE", "LAST", "AVG", "MIN", 
                      "MAX", "SQUARE_LEFT", "SQUARE_RIGHT", "CURLY_LEFT", 
                      "CURLY_RIGHT", "ROUND_LEFT", "ROUND_RIGHT", "COMMA", 
                      "PERCENT", "PLUS", "MINUS", "NOT_EQUAL", "NOT_EQUAL_SQL", 
                      "LTE", "GTE", "EQUAL", "LT", "GT", "IDENTIFIER_DOUBLE_QUOTE", 
                      "IDENTIFIER_BACKTICK", "IDENTIFIER_UNQUOTED", "STRING", 
                      "DIGITS", "S" ]

    RULE_check = 0
    RULE_reconciliation_check = 1
    RULE_reconciliation_row_diff_check = 2
    RULE_reconciliation_metric_check = 3
    RULE_freshness_check = 4
    RULE_freshness_variable = 5
    RULE_warn_qualifier = 6
    RULE_failed_rows_check = 7
    RULE_group_by_check = 8
    RULE_row_count_comparison_check = 9
    RULE_metric_check = 10
    RULE_default_anomaly_threshold = 11
    RULE_change_over_time = 12
    RULE_change_over_time_config = 13
    RULE_change_aggregation = 14
    RULE_same_day_last_week = 15
    RULE_percent = 16
    RULE_anomaly_score = 17
    RULE_metric = 18
    RULE_metric_name = 19
    RULE_metric_args = 20
    RULE_metric_arg = 21
    RULE_threshold = 22
    RULE_reconciliation_threshold = 23
    RULE_between_threshold = 24
    RULE_reconciliation_between_threshold = 25
    RULE_comparator_threshold = 26
    RULE_reconciliation_comparator_threshold = 27
    RULE_zones_threshold = 28
    RULE_outcome = 29
    RULE_zone_comparator = 30
    RULE_comparator = 31
    RULE_threshold_value = 32
    RULE_diff = 33
    RULE_freshness_threshold_value = 34
    RULE_reference_check = 35
    RULE_source_column_name = 36
    RULE_target_column_name = 37
    RULE_section_header = 38
    RULE_table_checks_header = 39
    RULE_partition_name = 40
    RULE_table_filter_header = 41
    RULE_column_configurations_header = 42
    RULE_checks_for_each_dataset_header = 43
    RULE_checks_for_each_column_header = 44
    RULE_reconciliation_check_header = 45
    RULE_signed_number = 46
    RULE_number = 47
    RULE_integer = 48
    RULE_identifier = 49

    ruleNames =  [ "check", "reconciliation_check", "reconciliation_row_diff_check", 
                   "reconciliation_metric_check", "freshness_check", "freshness_variable", 
                   "warn_qualifier", "failed_rows_check", "group_by_check", 
                   "row_count_comparison_check", "metric_check", "default_anomaly_threshold", 
                   "change_over_time", "change_over_time_config", "change_aggregation", 
                   "same_day_last_week", "percent", "anomaly_score", "metric", 
                   "metric_name", "metric_args", "metric_arg", "threshold", 
                   "reconciliation_threshold", "between_threshold", "reconciliation_between_threshold", 
                   "comparator_threshold", "reconciliation_comparator_threshold", 
                   "zones_threshold", "outcome", "zone_comparator", "comparator", 
                   "threshold_value", "diff", "freshness_threshold_value", 
                   "reference_check", "source_column_name", "target_column_name", 
                   "section_header", "table_checks_header", "partition_name", 
                   "table_filter_header", "column_configurations_header", 
                   "checks_for_each_dataset_header", "checks_for_each_column_header", 
                   "reconciliation_check_header", "signed_number", "number", 
                   "integer", "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    FOR=25
    AND=26
    BETWEEN=27
    NOT=28
    IN=29
    WARN=30
    FAIL=31
    PASS=32
    CHANGE=33
    LAST=34
    AVG=35
    MIN=36
    MAX=37
    SQUARE_LEFT=38
    SQUARE_RIGHT=39
    CURLY_LEFT=40
    CURLY_RIGHT=41
    ROUND_LEFT=42
    ROUND_RIGHT=43
    COMMA=44
    PERCENT=45
    PLUS=46
    MINUS=47
    NOT_EQUAL=48
    NOT_EQUAL_SQL=49
    LTE=50
    GTE=51
    EQUAL=52
    LT=53
    GT=54
    IDENTIFIER_DOUBLE_QUOTE=55
    IDENTIFIER_BACKTICK=56
    IDENTIFIER_UNQUOTED=57
    STRING=58
    DIGITS=59
    S=60

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def failed_rows_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Failed_rows_checkContext,0)


        def row_count_comparison_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Row_count_comparison_checkContext,0)


        def metric_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Metric_checkContext,0)


        def reference_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reference_checkContext,0)


        def freshness_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Freshness_checkContext,0)


        def group_by_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Group_by_checkContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = SodaCLAntlrParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_check)
        try:
            self.state = 106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 100
                self.failed_rows_check()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 101
                self.row_count_comparison_check()
                pass
            elif token in [10, 33, 35, 36, 37, 55, 56, 57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 102
                self.metric_check()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 4)
                self.state = 103
                self.reference_check()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 5)
                self.state = 104
                self.freshness_check()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 6)
                self.state = 105
                self.group_by_check()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reconciliation_metric_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_metric_checkContext,0)


        def reconciliation_row_diff_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_row_diff_checkContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_check" ):
                listener.enterReconciliation_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_check" ):
                listener.exitReconciliation_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_check" ):
                return visitor.visitReconciliation_check(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_check(self):

        localctx = SodaCLAntlrParser.Reconciliation_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_reconciliation_check)
        try:
            self.state = 110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 36, 37, 55, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 108
                self.reconciliation_metric_check()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 109
                self.reconciliation_row_diff_check()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_row_diff_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ThresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_row_diff_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_row_diff_check" ):
                listener.enterReconciliation_row_diff_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_row_diff_check" ):
                listener.exitReconciliation_row_diff_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_row_diff_check" ):
                return visitor.visitReconciliation_row_diff_check(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_row_diff_check(self):

        localctx = SodaCLAntlrParser.Reconciliation_row_diff_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_reconciliation_row_diff_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 112
            self.match(SodaCLAntlrParser.T__0)
            self.state = 115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 113
                self.match(SodaCLAntlrParser.S)
                self.state = 114
                self.threshold()


            self.state = 117
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_metric_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metric(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.MetricContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def reconciliation_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_thresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_metric_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_metric_check" ):
                listener.enterReconciliation_metric_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_metric_check" ):
                listener.exitReconciliation_metric_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_metric_check" ):
                return visitor.visitReconciliation_metric_check(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_metric_check(self):

        localctx = SodaCLAntlrParser.Reconciliation_metric_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_reconciliation_metric_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 119
            self.metric()
            self.state = 122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 120
                self.match(SodaCLAntlrParser.S)
                self.state = 121
                self.reconciliation_threshold()


            self.state = 124
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freshness_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def freshness_variable(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Freshness_variableContext,0)


        def LT(self):
            return self.getToken(SodaCLAntlrParser.LT, 0)

        def freshness_threshold_value(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Freshness_threshold_valueContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_freshness_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreshness_check" ):
                listener.enterFreshness_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreshness_check" ):
                listener.exitFreshness_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFreshness_check" ):
                return visitor.visitFreshness_check(self)
            else:
                return visitor.visitChildren(self)




    def freshness_check(self):

        localctx = SodaCLAntlrParser.Freshness_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_freshness_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 126
            self.match(SodaCLAntlrParser.T__1)
            self.state = 127
            self.match(SodaCLAntlrParser.S)
            self.state = 128
            self.identifier()
            self.state = 130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 129
                self.freshness_variable()


            self.state = 136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 132
                self.match(SodaCLAntlrParser.S)
                self.state = 133
                self.match(SodaCLAntlrParser.LT)
                self.state = 134
                self.match(SodaCLAntlrParser.S)
                self.state = 135
                self.freshness_threshold_value()


            self.state = 138
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freshness_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_freshness_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreshness_variable" ):
                listener.enterFreshness_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreshness_variable" ):
                listener.exitFreshness_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFreshness_variable" ):
                return visitor.visitFreshness_variable(self)
            else:
                return visitor.visitChildren(self)




    def freshness_variable(self):

        localctx = SodaCLAntlrParser.Freshness_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_freshness_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 140
            self.match(SodaCLAntlrParser.S)
            self.state = 141
            self.match(SodaCLAntlrParser.T__2)
            self.state = 142
            self.match(SodaCLAntlrParser.S)
            self.state = 143
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Warn_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def WARN(self):
            return self.getToken(SodaCLAntlrParser.WARN, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_warn_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWarn_qualifier" ):
                listener.enterWarn_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWarn_qualifier" ):
                listener.exitWarn_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWarn_qualifier" ):
                return visitor.visitWarn_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def warn_qualifier(self):

        localctx = SodaCLAntlrParser.Warn_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_warn_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 145
            self.match(SodaCLAntlrParser.S)
            self.state = 146
            self.match(SodaCLAntlrParser.WARN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Failed_rows_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_failed_rows_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailed_rows_check" ):
                listener.enterFailed_rows_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailed_rows_check" ):
                listener.exitFailed_rows_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailed_rows_check" ):
                return visitor.visitFailed_rows_check(self)
            else:
                return visitor.visitChildren(self)




    def failed_rows_check(self):

        localctx = SodaCLAntlrParser.Failed_rows_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_failed_rows_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148
            self.match(SodaCLAntlrParser.T__3)
            self.state = 149
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_group_by_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_check" ):
                listener.enterGroup_by_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_check" ):
                listener.exitGroup_by_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_check" ):
                return visitor.visitGroup_by_check(self)
            else:
                return visitor.visitChildren(self)




    def group_by_check(self):

        localctx = SodaCLAntlrParser.Group_by_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_group_by_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 151
            self.match(SodaCLAntlrParser.T__4)
            self.state = 152
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_count_comparison_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,i)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def partition_name(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Partition_nameContext,0)


        def IN(self):
            return self.getToken(SodaCLAntlrParser.IN, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_row_count_comparison_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count_comparison_check" ):
                listener.enterRow_count_comparison_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count_comparison_check" ):
                listener.exitRow_count_comparison_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_count_comparison_check" ):
                return visitor.visitRow_count_comparison_check(self)
            else:
                return visitor.visitChildren(self)




    def row_count_comparison_check(self):

        localctx = SodaCLAntlrParser.Row_count_comparison_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_row_count_comparison_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self.match(SodaCLAntlrParser.T__5)
            self.state = 155
            self.match(SodaCLAntlrParser.S)
            self.state = 156
            self.identifier()
            self.state = 159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 157
                self.match(SodaCLAntlrParser.S)
                self.state = 158
                self.partition_name()


            self.state = 165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 161
                self.match(SodaCLAntlrParser.S)
                self.state = 162
                self.match(SodaCLAntlrParser.IN)
                self.state = 163
                self.match(SodaCLAntlrParser.S)
                self.state = 164
                self.identifier()


            self.state = 167
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Metric_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metric(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.MetricContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def change_over_time(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Change_over_timeContext,0)


        def anomaly_score(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Anomaly_scoreContext,0)


        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ThresholdContext,0)


        def default_anomaly_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Default_anomaly_thresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric_check" ):
                listener.enterMetric_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric_check" ):
                listener.exitMetric_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric_check" ):
                return visitor.visitMetric_check(self)
            else:
                return visitor.visitChildren(self)




    def metric_check(self):

        localctx = SodaCLAntlrParser.Metric_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_metric_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                self.state = 169
                self.change_over_time()
                pass
            elif token in [10]:
                self.state = 170
                self.anomaly_score()
                pass
            elif token in [35, 36, 37, 55, 56, 57]:
                pass
            else:
                pass
            self.state = 173
            self.metric()
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 174
                self.match(SodaCLAntlrParser.S)
                self.state = 177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 175
                    self.threshold()
                    pass

                elif la_ == 2:
                    self.state = 176
                    self.default_anomaly_threshold()
                    pass




            self.state = 181
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_anomaly_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SodaCLAntlrParser.LT, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_default_anomaly_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_anomaly_threshold" ):
                listener.enterDefault_anomaly_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_anomaly_threshold" ):
                listener.exitDefault_anomaly_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_anomaly_threshold" ):
                return visitor.visitDefault_anomaly_threshold(self)
            else:
                return visitor.visitChildren(self)




    def default_anomaly_threshold(self):

        localctx = SodaCLAntlrParser.Default_anomaly_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_default_anomaly_threshold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self.match(SodaCLAntlrParser.LT)
            self.state = 184
            self.match(SodaCLAntlrParser.S)
            self.state = 185
            self.match(SodaCLAntlrParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_over_timeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(SodaCLAntlrParser.CHANGE, 0)

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def FOR(self):
            return self.getToken(SodaCLAntlrParser.FOR, 0)

        def change_over_time_config(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Change_over_time_configContext,0)


        def percent(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.PercentContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_change_over_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_over_time" ):
                listener.enterChange_over_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_over_time" ):
                listener.exitChange_over_time(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_over_time" ):
                return visitor.visitChange_over_time(self)
            else:
                return visitor.visitChildren(self)




    def change_over_time(self):

        localctx = SodaCLAntlrParser.Change_over_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_change_over_time)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(SodaCLAntlrParser.CHANGE)
            self.state = 188
            self.match(SodaCLAntlrParser.S)
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168832) != 0:
                self.state = 189
                self.change_over_time_config()
                self.state = 190
                self.match(SodaCLAntlrParser.S)


            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 194
                self.percent()


            self.state = 197
            self.match(SodaCLAntlrParser.FOR)
            self.state = 198
            self.match(SodaCLAntlrParser.S)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_over_time_configContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def change_aggregation(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Change_aggregationContext,0)


        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def LAST(self):
            return self.getToken(SodaCLAntlrParser.LAST, 0)

        def integer(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IntegerContext,0)


        def same_day_last_week(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Same_day_last_weekContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_change_over_time_config

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_over_time_config" ):
                listener.enterChange_over_time_config(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_over_time_config" ):
                listener.exitChange_over_time_config(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_over_time_config" ):
                return visitor.visitChange_over_time_config(self)
            else:
                return visitor.visitChildren(self)




    def change_over_time_config(self):

        localctx = SodaCLAntlrParser.Change_over_time_configContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_change_over_time_config)
        try:
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 36, 37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 200
                self.change_aggregation()
                self.state = 201
                self.match(SodaCLAntlrParser.S)
                self.state = 202
                self.match(SodaCLAntlrParser.LAST)
                self.state = 203
                self.match(SodaCLAntlrParser.S)
                self.state = 204
                self.integer()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.same_day_last_week()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_aggregationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(SodaCLAntlrParser.AVG, 0)

        def MIN(self):
            return self.getToken(SodaCLAntlrParser.MIN, 0)

        def MAX(self):
            return self.getToken(SodaCLAntlrParser.MAX, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_change_aggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_aggregation" ):
                listener.enterChange_aggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_aggregation" ):
                listener.exitChange_aggregation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_aggregation" ):
                return visitor.visitChange_aggregation(self)
            else:
                return visitor.visitChildren(self)




    def change_aggregation(self):

        localctx = SodaCLAntlrParser.Change_aggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_change_aggregation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168576) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Same_day_last_weekContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_same_day_last_week

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSame_day_last_week" ):
                listener.enterSame_day_last_week(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSame_day_last_week" ):
                listener.exitSame_day_last_week(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSame_day_last_week" ):
                return visitor.visitSame_day_last_week(self)
            else:
                return visitor.visitChildren(self)




    def same_day_last_week(self):

        localctx = SodaCLAntlrParser.Same_day_last_weekContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_same_day_last_week)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(SodaCLAntlrParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PercentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_percent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPercent" ):
                listener.enterPercent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPercent" ):
                listener.exitPercent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPercent" ):
                return visitor.visitPercent(self)
            else:
                return visitor.visitChildren(self)




    def percent(self):

        localctx = SodaCLAntlrParser.PercentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_percent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.match(SodaCLAntlrParser.T__8)
            self.state = 214
            self.match(SodaCLAntlrParser.S)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anomaly_scoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_anomaly_score

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnomaly_score" ):
                listener.enterAnomaly_score(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnomaly_score" ):
                listener.exitAnomaly_score(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnomaly_score" ):
                return visitor.visitAnomaly_score(self)
            else:
                return visitor.visitChildren(self)




    def anomaly_score(self):

        localctx = SodaCLAntlrParser.Anomaly_scoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_anomaly_score)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(SodaCLAntlrParser.T__9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetricContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metric_name(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Metric_nameContext,0)


        def metric_args(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Metric_argsContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric" ):
                listener.enterMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric" ):
                listener.exitMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric" ):
                return visitor.visitMetric(self)
            else:
                return visitor.visitChildren(self)




    def metric(self):

        localctx = SodaCLAntlrParser.MetricContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_metric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.metric_name()
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 219
                self.metric_args()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Metric_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric_name" ):
                listener.enterMetric_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric_name" ):
                listener.exitMetric_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric_name" ):
                return visitor.visitMetric_name(self)
            else:
                return visitor.visitChildren(self)




    def metric_name(self):

        localctx = SodaCLAntlrParser.Metric_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_metric_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Metric_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROUND_LEFT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_LEFT, 0)

        def metric_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Metric_argContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Metric_argContext,i)


        def ROUND_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.COMMA)
            else:
                return self.getToken(SodaCLAntlrParser.COMMA, i)

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric_args" ):
                listener.enterMetric_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric_args" ):
                listener.exitMetric_args(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric_args" ):
                return visitor.visitMetric_args(self)
            else:
                return visitor.visitChildren(self)




    def metric_args(self):

        localctx = SodaCLAntlrParser.Metric_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_metric_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(SodaCLAntlrParser.ROUND_LEFT)
            self.state = 225
            self.metric_arg()
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44:
                self.state = 226
                self.match(SodaCLAntlrParser.COMMA)
                self.state = 227
                self.match(SodaCLAntlrParser.S)
                self.state = 228
                self.metric_arg()
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self.match(SodaCLAntlrParser.ROUND_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Metric_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Signed_numberContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric_arg" ):
                listener.enterMetric_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric_arg" ):
                listener.exitMetric_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric_arg" ):
                return visitor.visitMetric_arg(self)
            else:
                return visitor.visitChildren(self)




    def metric_arg(self):

        localctx = SodaCLAntlrParser.Metric_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_metric_arg)
        try:
            self.state = 238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24, 46, 47, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.signed_number()
                pass
            elif token in [35, 36, 37, 55, 56, 57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparator_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Comparator_thresholdContext,0)


        def between_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Between_thresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreshold" ):
                listener.enterThreshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreshold" ):
                listener.exitThreshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreshold" ):
                return visitor.visitThreshold(self)
            else:
                return visitor.visitChildren(self)




    def threshold(self):

        localctx = SodaCLAntlrParser.ThresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_threshold)
        try:
            self.state = 242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 49, 50, 51, 52, 53, 54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 240
                self.comparator_threshold()
                pass
            elif token in [27, 28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 241
                self.between_threshold()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reconciliation_comparator_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_comparator_thresholdContext,0)


        def reconciliation_between_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_between_thresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_threshold" ):
                listener.enterReconciliation_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_threshold" ):
                listener.exitReconciliation_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_threshold" ):
                return visitor.visitReconciliation_threshold(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_threshold(self):

        localctx = SodaCLAntlrParser.Reconciliation_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_reconciliation_threshold)
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.reconciliation_comparator_threshold()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.reconciliation_between_threshold()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(SodaCLAntlrParser.BETWEEN, 0)

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def threshold_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Threshold_valueContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,i)


        def AND(self):
            return self.getToken(SodaCLAntlrParser.AND, 0)

        def NOT(self):
            return self.getToken(SodaCLAntlrParser.NOT, 0)

        def SQUARE_LEFT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_LEFT, 0)

        def ROUND_LEFT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_LEFT, 0)

        def SQUARE_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_RIGHT, 0)

        def ROUND_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_RIGHT, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_between_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_threshold" ):
                listener.enterBetween_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_threshold" ):
                listener.exitBetween_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_threshold" ):
                return visitor.visitBetween_threshold(self)
            else:
                return visitor.visitChildren(self)




    def between_threshold(self):

        localctx = SodaCLAntlrParser.Between_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_between_threshold)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 248
                self.match(SodaCLAntlrParser.NOT)
                self.state = 249
                self.match(SodaCLAntlrParser.S)


            self.state = 252
            self.match(SodaCLAntlrParser.BETWEEN)
            self.state = 253
            self.match(SodaCLAntlrParser.S)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38 or _la==42:
                self.state = 254
                _la = self._input.LA(1)
                if not(_la==38 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 257
            self.threshold_value()
            self.state = 258
            self.match(SodaCLAntlrParser.S)
            self.state = 259
            self.match(SodaCLAntlrParser.AND)
            self.state = 260
            self.match(SodaCLAntlrParser.S)
            self.state = 261
            self.threshold_value()
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39 or _la==43:
                self.state = 262
                _la = self._input.LA(1)
                if not(_la==39 or _la==43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_between_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diff(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.DiffContext,0)


        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def BETWEEN(self):
            return self.getToken(SodaCLAntlrParser.BETWEEN, 0)

        def threshold_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Threshold_valueContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,i)


        def AND(self):
            return self.getToken(SodaCLAntlrParser.AND, 0)

        def NOT(self):
            return self.getToken(SodaCLAntlrParser.NOT, 0)

        def SQUARE_LEFT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_LEFT, 0)

        def ROUND_LEFT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_LEFT, 0)

        def SQUARE_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_RIGHT, 0)

        def ROUND_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_RIGHT, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_between_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_between_threshold" ):
                listener.enterReconciliation_between_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_between_threshold" ):
                listener.exitReconciliation_between_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_between_threshold" ):
                return visitor.visitReconciliation_between_threshold(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_between_threshold(self):

        localctx = SodaCLAntlrParser.Reconciliation_between_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_reconciliation_between_threshold)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.diff()
            self.state = 266
            self.match(SodaCLAntlrParser.S)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 267
                self.match(SodaCLAntlrParser.NOT)
                self.state = 268
                self.match(SodaCLAntlrParser.S)


            self.state = 271
            self.match(SodaCLAntlrParser.BETWEEN)
            self.state = 272
            self.match(SodaCLAntlrParser.S)
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38 or _la==42:
                self.state = 273
                _la = self._input.LA(1)
                if not(_la==38 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 276
            self.threshold_value()
            self.state = 277
            self.match(SodaCLAntlrParser.S)
            self.state = 278
            self.match(SodaCLAntlrParser.AND)
            self.state = 279
            self.match(SodaCLAntlrParser.S)
            self.state = 280
            self.threshold_value()
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39 or _la==43:
                self.state = 281
                _la = self._input.LA(1)
                if not(_la==39 or _la==43):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparator_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparator(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ComparatorContext,0)


        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def threshold_value(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_comparator_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparator_threshold" ):
                listener.enterComparator_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparator_threshold" ):
                listener.exitComparator_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparator_threshold" ):
                return visitor.visitComparator_threshold(self)
            else:
                return visitor.visitChildren(self)




    def comparator_threshold(self):

        localctx = SodaCLAntlrParser.Comparator_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_comparator_threshold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.comparator()
            self.state = 285
            self.match(SodaCLAntlrParser.S)
            self.state = 286
            self.threshold_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_comparator_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diff(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.DiffContext,0)


        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def comparator(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ComparatorContext,0)


        def threshold_value(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_comparator_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_comparator_threshold" ):
                listener.enterReconciliation_comparator_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_comparator_threshold" ):
                listener.exitReconciliation_comparator_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_comparator_threshold" ):
                return visitor.visitReconciliation_comparator_threshold(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_comparator_threshold(self):

        localctx = SodaCLAntlrParser.Reconciliation_comparator_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_reconciliation_comparator_threshold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.diff()
            self.state = 289
            self.match(SodaCLAntlrParser.S)
            self.state = 290
            self.comparator()
            self.state = 291
            self.match(SodaCLAntlrParser.S)
            self.state = 292
            self.threshold_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zones_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outcome(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.OutcomeContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.OutcomeContext,i)


        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def zone_comparator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Zone_comparatorContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Zone_comparatorContext,i)


        def threshold_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Threshold_valueContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,i)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_zones_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZones_threshold" ):
                listener.enterZones_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZones_threshold" ):
                listener.exitZones_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZones_threshold" ):
                return visitor.visitZones_threshold(self)
            else:
                return visitor.visitChildren(self)




    def zones_threshold(self):

        localctx = SodaCLAntlrParser.Zones_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_zones_threshold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 294
                    self.outcome()
                    self.state = 295
                    self.match(SodaCLAntlrParser.S)
                    self.state = 296
                    self.zone_comparator()
                    self.state = 297
                    self.match(SodaCLAntlrParser.S)
                    self.state = 298
                    self.threshold_value()
                    self.state = 299
                    self.match(SodaCLAntlrParser.S)
                    self.state = 300
                    self.zone_comparator()
                    self.state = 301
                    self.match(SodaCLAntlrParser.S)

                else:
                    raise NoViableAltException(self)
                self.state = 305 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 307
            self.outcome()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WARN(self):
            return self.getToken(SodaCLAntlrParser.WARN, 0)

        def FAIL(self):
            return self.getToken(SodaCLAntlrParser.FAIL, 0)

        def PASS(self):
            return self.getToken(SodaCLAntlrParser.PASS, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_outcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutcome" ):
                listener.enterOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutcome" ):
                listener.exitOutcome(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutcome" ):
                return visitor.visitOutcome(self)
            else:
                return visitor.visitChildren(self)




    def outcome(self):

        localctx = SodaCLAntlrParser.OutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_outcome)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zone_comparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SodaCLAntlrParser.LT, 0)

        def LTE(self):
            return self.getToken(SodaCLAntlrParser.LTE, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_zone_comparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZone_comparator" ):
                listener.enterZone_comparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZone_comparator" ):
                listener.exitZone_comparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZone_comparator" ):
                return visitor.visitZone_comparator(self)
            else:
                return visitor.visitChildren(self)




    def zone_comparator(self):

        localctx = SodaCLAntlrParser.Zone_comparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_zone_comparator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            _la = self._input.LA(1)
            if not(_la==50 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SodaCLAntlrParser.LT, 0)

        def LTE(self):
            return self.getToken(SodaCLAntlrParser.LTE, 0)

        def EQUAL(self):
            return self.getToken(SodaCLAntlrParser.EQUAL, 0)

        def GTE(self):
            return self.getToken(SodaCLAntlrParser.GTE, 0)

        def GT(self):
            return self.getToken(SodaCLAntlrParser.GT, 0)

        def NOT_EQUAL(self):
            return self.getToken(SodaCLAntlrParser.NOT_EQUAL, 0)

        def NOT_EQUAL_SQL(self):
            return self.getToken(SodaCLAntlrParser.NOT_EQUAL_SQL, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_comparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparator" ):
                listener.enterComparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparator" ):
                listener.exitComparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparator" ):
                return visitor.visitComparator(self)
            else:
                return visitor.visitChildren(self)




    def comparator(self):

        localctx = SodaCLAntlrParser.ComparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_comparator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 35747322042253312) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Threshold_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Signed_numberContext,0)


        def PERCENT(self):
            return self.getToken(SodaCLAntlrParser.PERCENT, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def freshness_threshold_value(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Freshness_threshold_valueContext,0)


        def IDENTIFIER_UNQUOTED(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_UNQUOTED, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_threshold_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreshold_value" ):
                listener.enterThreshold_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreshold_value" ):
                listener.exitThreshold_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreshold_value" ):
                return visitor.visitThreshold_value(self)
            else:
                return visitor.visitChildren(self)




    def threshold_value(self):

        localctx = SodaCLAntlrParser.Threshold_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_threshold_value)
        self._la = 0 # Token type
        try:
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self.signed_number()
                self.state = 320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==60:
                        self.state = 316
                        self.match(SodaCLAntlrParser.S)


                    self.state = 319
                    self.match(SodaCLAntlrParser.PERCENT)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.freshness_threshold_value()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.match(SodaCLAntlrParser.IDENTIFIER_UNQUOTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiffContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_diff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiff" ):
                listener.enterDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiff" ):
                listener.exitDiff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiff" ):
                return visitor.visitDiff(self)
            else:
                return visitor.visitChildren(self)




    def diff(self):

        localctx = SodaCLAntlrParser.DiffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_diff)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(SodaCLAntlrParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freshness_threshold_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.IntegerContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.IntegerContext,i)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_freshness_threshold_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreshness_threshold_value" ):
                listener.enterFreshness_threshold_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreshness_threshold_value" ):
                listener.exitFreshness_threshold_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFreshness_threshold_value" ):
                return visitor.visitFreshness_threshold_value(self)
            else:
                return visitor.visitChildren(self)




    def freshness_threshold_value(self):

        localctx = SodaCLAntlrParser.Freshness_threshold_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_freshness_threshold_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 328
                    self.integer()
                    self.state = 329
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 28672) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 333 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 335
                self.integer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def source_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Source_column_nameContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Source_column_nameContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def target_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Target_column_nameContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Target_column_nameContext,i)


        def ROUND_LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.ROUND_LEFT)
            else:
                return self.getToken(SodaCLAntlrParser.ROUND_LEFT, i)

        def ROUND_RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.ROUND_RIGHT)
            else:
                return self.getToken(SodaCLAntlrParser.ROUND_RIGHT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.COMMA)
            else:
                return self.getToken(SodaCLAntlrParser.COMMA, i)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reference_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_check" ):
                listener.enterReference_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_check" ):
                listener.exitReference_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_check" ):
                return visitor.visitReference_check(self)
            else:
                return visitor.visitChildren(self)




    def reference_check(self):

        localctx = SodaCLAntlrParser.Reference_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_reference_check)
        self._la = 0 # Token type
        try:
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.match(SodaCLAntlrParser.T__14)
                self.state = 339
                self.match(SodaCLAntlrParser.S)
                self.state = 340
                self.source_column_name()
                self.state = 341
                self.match(SodaCLAntlrParser.S)
                self.state = 342
                self.match(SodaCLAntlrParser.T__15)
                self.state = 343
                self.match(SodaCLAntlrParser.S)
                self.state = 344
                self.identifier()
                self.state = 345
                self.match(SodaCLAntlrParser.S)
                self.state = 346
                self.target_column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                self.match(SodaCLAntlrParser.T__14)
                self.state = 349
                self.match(SodaCLAntlrParser.S)
                self.state = 350
                self.match(SodaCLAntlrParser.ROUND_LEFT)
                self.state = 351
                self.source_column_name()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44:
                    self.state = 352
                    self.match(SodaCLAntlrParser.COMMA)
                    self.state = 353
                    self.match(SodaCLAntlrParser.S)
                    self.state = 354
                    self.source_column_name()
                    self.state = 359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 360
                self.match(SodaCLAntlrParser.ROUND_RIGHT)
                self.state = 361
                self.match(SodaCLAntlrParser.S)
                self.state = 362
                self.match(SodaCLAntlrParser.T__15)
                self.state = 363
                self.match(SodaCLAntlrParser.S)
                self.state = 364
                self.identifier()
                self.state = 365
                self.match(SodaCLAntlrParser.S)
                self.state = 366
                self.match(SodaCLAntlrParser.ROUND_LEFT)
                self.state = 367
                self.target_column_name()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44:
                    self.state = 368
                    self.match(SodaCLAntlrParser.COMMA)
                    self.state = 369
                    self.match(SodaCLAntlrParser.S)
                    self.state = 370
                    self.target_column_name()
                    self.state = 375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 376
                self.match(SodaCLAntlrParser.ROUND_RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_source_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_column_name" ):
                listener.enterSource_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_column_name" ):
                listener.exitSource_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSource_column_name" ):
                return visitor.visitSource_column_name(self)
            else:
                return visitor.visitChildren(self)




    def source_column_name(self):

        localctx = SodaCLAntlrParser.Source_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_source_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_target_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_column_name" ):
                listener.enterTarget_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_column_name" ):
                listener.exitTarget_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_column_name" ):
                return visitor.visitTarget_column_name(self)
            else:
                return visitor.visitChildren(self)




    def target_column_name(self):

        localctx = SodaCLAntlrParser.Target_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_target_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Section_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_checks_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Table_checks_headerContext,0)


        def column_configurations_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Column_configurations_headerContext,0)


        def table_filter_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Table_filter_headerContext,0)


        def checks_for_each_dataset_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Checks_for_each_dataset_headerContext,0)


        def checks_for_each_column_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Checks_for_each_column_headerContext,0)


        def reconciliation_check_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_check_headerContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_section_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_header" ):
                listener.enterSection_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_header" ):
                listener.exitSection_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection_header" ):
                return visitor.visitSection_header(self)
            else:
                return visitor.visitChildren(self)




    def section_header(self):

        localctx = SodaCLAntlrParser.Section_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_section_header)
        try:
            self.state = 390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 384
                self.table_checks_header()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 385
                self.column_configurations_header()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 386
                self.table_filter_header()
                pass
            elif token in [20, 21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 387
                self.checks_for_each_dataset_header()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 5)
                self.state = 388
                self.checks_for_each_column_header()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 6)
                self.state = 389
                self.reconciliation_check_header()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_checks_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def partition_name(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Partition_nameContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_table_checks_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_checks_header" ):
                listener.enterTable_checks_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_checks_header" ):
                listener.exitTable_checks_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_checks_header" ):
                return visitor.visitTable_checks_header(self)
            else:
                return visitor.visitChildren(self)




    def table_checks_header(self):

        localctx = SodaCLAntlrParser.Table_checks_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_table_checks_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(SodaCLAntlrParser.T__16)
            self.state = 393
            self.match(SodaCLAntlrParser.S)
            self.state = 394
            self.identifier()
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 395
                self.match(SodaCLAntlrParser.S)
                self.state = 396
                self.partition_name()


            self.state = 399
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQUARE_LEFT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_LEFT, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def SQUARE_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_RIGHT, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_name" ):
                return visitor.visitPartition_name(self)
            else:
                return visitor.visitChildren(self)




    def partition_name(self):

        localctx = SodaCLAntlrParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(SodaCLAntlrParser.SQUARE_LEFT)
            self.state = 402
            self.identifier()
            self.state = 403
            self.match(SodaCLAntlrParser.SQUARE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_filter_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def partition_name(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Partition_nameContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_table_filter_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_filter_header" ):
                listener.enterTable_filter_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_filter_header" ):
                listener.exitTable_filter_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_filter_header" ):
                return visitor.visitTable_filter_header(self)
            else:
                return visitor.visitChildren(self)




    def table_filter_header(self):

        localctx = SodaCLAntlrParser.Table_filter_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_table_filter_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(SodaCLAntlrParser.T__17)
            self.state = 406
            self.match(SodaCLAntlrParser.S)
            self.state = 407
            self.identifier()
            self.state = 408
            self.match(SodaCLAntlrParser.S)
            self.state = 409
            self.partition_name()
            self.state = 410
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_configurations_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_column_configurations_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_configurations_header" ):
                listener.enterColumn_configurations_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_configurations_header" ):
                listener.exitColumn_configurations_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_configurations_header" ):
                return visitor.visitColumn_configurations_header(self)
            else:
                return visitor.visitChildren(self)




    def column_configurations_header(self):

        localctx = SodaCLAntlrParser.Column_configurations_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_column_configurations_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(SodaCLAntlrParser.T__18)
            self.state = 413
            self.match(SodaCLAntlrParser.S)
            self.state = 414
            self.identifier()
            self.state = 415
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checks_for_each_dataset_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_checks_for_each_dataset_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecks_for_each_dataset_header" ):
                listener.enterChecks_for_each_dataset_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecks_for_each_dataset_header" ):
                listener.exitChecks_for_each_dataset_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChecks_for_each_dataset_header" ):
                return visitor.visitChecks_for_each_dataset_header(self)
            else:
                return visitor.visitChildren(self)




    def checks_for_each_dataset_header(self):

        localctx = SodaCLAntlrParser.Checks_for_each_dataset_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_checks_for_each_dataset_header)
        try:
            self.state = 427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.match(SodaCLAntlrParser.T__19)
                self.state = 418
                self.match(SodaCLAntlrParser.S)
                self.state = 419
                self.identifier()
                self.state = 420
                self.match(SodaCLAntlrParser.EOF)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 422
                self.match(SodaCLAntlrParser.T__20)
                self.state = 423
                self.match(SodaCLAntlrParser.S)
                self.state = 424
                self.identifier()
                self.state = 425
                self.match(SodaCLAntlrParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checks_for_each_column_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_checks_for_each_column_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecks_for_each_column_header" ):
                listener.enterChecks_for_each_column_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecks_for_each_column_header" ):
                listener.exitChecks_for_each_column_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChecks_for_each_column_header" ):
                return visitor.visitChecks_for_each_column_header(self)
            else:
                return visitor.visitChildren(self)




    def checks_for_each_column_header(self):

        localctx = SodaCLAntlrParser.Checks_for_each_column_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_checks_for_each_column_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(SodaCLAntlrParser.T__21)
            self.state = 430
            self.match(SodaCLAntlrParser.S)
            self.state = 431
            self.identifier()
            self.state = 432
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_check_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_check_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_check_header" ):
                listener.enterReconciliation_check_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_check_header" ):
                listener.exitReconciliation_check_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_check_header" ):
                return visitor.visitReconciliation_check_header(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_check_header(self):

        localctx = SodaCLAntlrParser.Reconciliation_check_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_reconciliation_check_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(SodaCLAntlrParser.T__22)
            self.state = 435
            self.match(SodaCLAntlrParser.S)
            self.state = 436
            self.identifier()
            self.state = 437
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.NumberContext,0)


        def PLUS(self):
            return self.getToken(SodaCLAntlrParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SodaCLAntlrParser.MINUS, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = SodaCLAntlrParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46 or _la==47:
                self.state = 439
                _la = self._input.LA(1)
                if not(_la==46 or _la==47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 442
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IntegerContext,0)


        def DIGITS(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.DIGITS)
            else:
                return self.getToken(SodaCLAntlrParser.DIGITS, i)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = SodaCLAntlrParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.integer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.match(SodaCLAntlrParser.DIGITS)
                self.state = 446
                self.match(SodaCLAntlrParser.T__23)
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 447
                    self.match(SodaCLAntlrParser.DIGITS)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 450
                    self.match(SodaCLAntlrParser.DIGITS)


                self.state = 453
                self.match(SodaCLAntlrParser.T__23)
                self.state = 454
                self.match(SodaCLAntlrParser.DIGITS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(SodaCLAntlrParser.DIGITS, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = SodaCLAntlrParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(SodaCLAntlrParser.DIGITS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER_UNQUOTED(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_UNQUOTED, 0)

        def IDENTIFIER_DOUBLE_QUOTE(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_DOUBLE_QUOTE, 0)

        def IDENTIFIER_BACKTICK(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_BACKTICK, 0)

        def MIN(self):
            return self.getToken(SodaCLAntlrParser.MIN, 0)

        def MAX(self):
            return self.getToken(SodaCLAntlrParser.MAX, 0)

        def AVG(self):
            return self.getToken(SodaCLAntlrParser.AVG, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SodaCLAntlrParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 252201819650916352) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





